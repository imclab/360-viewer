// Generated by CoffeeScript 1.6.2
(function() {
  var cacheImgs, i, maximize, nextTick, onComplete, setStyle, urls, _360;

  urls = (function() {
    var _i, _results;

    _results = [];
    for (i = _i = 1; _i <= 36; i = ++_i) {
      _results.push("testimg/" + i + ".jpg");
    }
    return _results;
  })();

  /* Notes {{{1
  
  {{{2 Comments on System specification
  
  Idea for embedding: maybe just:
  <img src="http://cdn.onetwo360.com/product.jpg" ...>, and then automatically transforms these into 360-scripts, ie. no javascript coding needed for embedding... but plugin can be configured with JS. 
  
  {{{2 Done
  
  - image caching / preloader
  - rotate proof of concept
  
  {{{2 Tasks/roadmap
  
  - scale to elem-size
  - touch handler/interpretion
  - fullscreen
  - communication with API
  
  {{{2 Structure
  
  - view component
  - touch handler
  - controller touch-events to view-changes
  
  {{{2 Interaction
  
  - drag left/right: rotate
    - rotation = x-drag scaled
  - tap/click: fullscreen, click on X or outside centered image to close
  - zoom (multitouch+multidrag: iOS + android 2.3.3+, zoom-button with lens on desktop)
  
  -----
  {{{2 Why img.src replacement
  
  When targeting mobile devices,  
  and possibly several 360ยบ views on a page,
  memory is more likely to be bottleneck than CPU.
  
  We therefore just preload the compressed images
  into the browsers component cache, 
  and decompress them at render time.
  
  The actual rendering is then just replacing
  the `src` of an image tag, - also making it work
  in non-HTML5 browsers, such as IE8, 
  which we also need to support.
  
  {{{2 Wanted features
  
  - performant, and working on IE8+,mobile,...
    - component caching
  - rotate
  - zoom
  - labels
  - touch
  */


  /* Util {{{1
  */


  nextTick = function(fn) {
    return setTimeout(fn, 0);
  };

  setStyle = function(elem, obj) {
    var key, val, _results;

    _results = [];
    for (key in obj) {
      val = obj[key];
      _results.push(elem.style[key] = val);
    }
    return _results;
  };

  cacheImgs = function(urls) {
    var url, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      url = urls[_i];
      _results.push((new Image).src = url);
    }
    return _results;
  };

  onComplete = function(fn) {
    var f;

    return (f = function() {
      if (document.readyState === "interactive" || document.readyState === "complete") {
        return fn();
      } else {
        return setTimeout(f, 10);
      }
    })();
  };

  /* maximize {{{2
  */


  maximize = function(elem) {
    var nextSibling, node, oldbody, parent, _i, _len, _ref;

    oldbody = document.createElement("div");
    oldbody.style.display = "none";
    parent = elem.parentElement;
    nextSibling = elem.nextSibling;
    document.body.appendChild(oldbody);
    _ref = (function() {
      var _j, _len, _ref, _results;

      _ref = document.body.childNodes;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        node = _ref[_j];
        _results.push(node);
      }
      return _results;
    })();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node !== oldbody) {
        oldbody.appendChild(node);
      }
    }
    document.body.appendChild(elem);
    return function() {
      var _j, _len1, _ref1;

      _ref1 = (function() {
        var _k, _len1, _ref1, _results;

        _ref1 = oldbody.childNodes;
        _results = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          node = _ref1[_k];
          _results.push(node);
        }
        return _results;
      })();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        node = _ref1[_j];
        document.body.appendChild(node);
      }
      oldbody.remove();
      if (nextSibling) {
        return elem.insertBefore(nextSibling);
      } else {
        return parent.appendChild(elem);
      }
    };
  };

  /* 360ยบ viewer {{{1
  */


  _360 = function(img) {
    var fullscreen, h, move, scale, w;

    w = img.width;
    h = img.height;
    console.log(w, h);
    urls = urls.map(function(url) {
      return url.replace(/(\?.*)?$/, "?" + w + "x" + h);
    });
    cacheImgs(urls);
    /* Create image element {{{2
    */

    img.src = urls[0];
    img.onload = function() {
      return setStyle(img, {
        width: img.width + "px",
        height: img.height + "px"
      });
    };
    img.onmousemove = function(e) {};
    fullscreen = new Image();
    fullscreen.src = "fullscreenIcon";
    setStyle(fullscreen, {
      position: "absolute",
      top: "0px",
      left: "0px"
    });
    /* Event / gesture handling {{{1
    */

    scale = function(x) {
      return ((x / w) * 1.5 * urls.length) | 0;
    };
    move = function(x) {
      return img.src = urls[urls.length - 1 - (scale(x) % urls.length)];
    };
    img.ontouchstart = img.ontouchend = function(e) {
      return e.preventDefault();
    };
    img.ontouchmove = function(e) {
      return move(e.touches[0].clientX);
    };
    img.onmousemove = function(e) {
      return move(e.clientX);
    };
    return img.onclick = function() {
      return img.onclick = maximize(img);
    };
  };

  /* Embedding {{{1
  */


  onComplete(function() {
    var elem, re, _i, _len, _ref, _results;

    re = /^https?:\/\/cdn.onetwo360.com\//;
    re = /^file:.*testimg\//;
    console.log("HERE");
    _ref = document.getElementsByTagName("img");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      if (re.exec(elem.src)) {
        _results.push(_360(elem));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

}).call(this);
