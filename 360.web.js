// Generated by CoffeeScript 1.6.3
(function() {
  var asyncEach, body, cacheImgs, devMode, elemAddEventListener, extend, floatPart, identityFn, log, logfrequency, logurl, maximize, nextTick, nop, onComplete, post, removeElem, runOnce, setStyle, setTouch, sleep, touchHandler, _ref,
    __slice = [].slice;

  if (typeof isNodeJs !== "boolean") {
    require("solapp").globalDefines(global);
  }

  devMode = true;

  if (!isNodeJs) {
    sleep = function(time, fn) {
      return setTimeout(fn, time * 1000);
    };
    floatPart = function(n) {
      return n - Math.floor(n);
    };
    nextTick = function(fn) {
      return setTimeout(fn, 0);
    };
    if (window.requestAnimationFrame == null) {
      window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || nextTick;
    }
    identityFn = function(e) {
      return e;
    };
    nop = function() {
      return void 0;
    };
    runOnce = function(fn) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (fn) {
          fn.apply(null, args);
          return fn = void 0;
        } else {
          return void 0;
        }
      };
    };
    extend = function() {
      var key, source, sources, target, val, _i, _len;
      target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        for (key in source) {
          val = source[key];
          target[key] = val;
        }
      }
      return target;
    };
    asyncEach = function(arr, fn, done) {
      var elem, next, remaining, _i, _len;
      done = runOnce(done);
      remaining = arr.length;
      next = function(err) {
        if (err) {
          done(err);
        }
        if (!--remaining) {
          return done();
        }
      };
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        elem = arr[_i];
        fn(elem, next);
      }
      return void 0;
    };
    if (Date.now == null) {
      Date.now = function() {
        return +new Date();
      };
    }
    removeElem = function(elem) {
      return elem != null ? elem.parentElement.removeChild(elem) : void 0;
    };
    body = document.getElementsByTagName("body")[0];
    onComplete = function(fn) {
      var f;
      return (f = function() {
        if (document.readyState === "complete") {
          return fn();
        } else {
          return setTimeout(f, 10);
        }
      })();
    };
    setStyle = function(elem, obj) {
      var e, key, val;
      for (key in obj) {
        val = obj[key];
        try {
          elem.style[key] = val;
        } catch (_error) {
          e = _error;
          e;
        }
      }
      return elem;
    };
    elemAddEventListener = function(elem, type, fn) {
      if (elem.addEventListener) {
        return elem.addEventListener(type, fn, false);
      } else {
        return elem.attachEvent("on" + type, fn);
      }
    };
    post = function(url, data, asyncCallback) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open("POST", url, !!asyncCallback);
      xhr.setRequestHeader("Content-type", "text/plain");
      if (!!asyncCallback) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            return asyncCallback((xhr.status === 200 ? null : xhr.status), xhr.responseText);
          }
        };
      }
      xhr.send(data);
      if (!asyncCallback) {
        return xhr.responseText;
      } else {
        return void 0;
      }
    };
    cacheImgs = function(urls, callback) {
      var loadImg;
      loadImg = function(url, done) {
        var img;
        img = new Image();
        img.src = url;
        return img.onload = function() {
          return done();
        };
      };
      return asyncEach(urls, loadImg, callback);
    };
    if (false) {
      maximize = function(elem) {
        var nextSibling, node, oldbody, parent, _i, _len, _ref;
        oldbody = document.createElement("div");
        oldbody.style.display = "none";
        parent = elem.parentElement;
        nextSibling = elem.nextSibling;
        body.appendChild(oldbody);
        _ref = (function() {
          var _j, _len, _ref, _results;
          _ref = body.childNodes;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            node = _ref[_j];
            _results.push(node);
          }
          return _results;
        })();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node !== oldbody) {
            oldbody.appendChild(node);
          }
        }
        body.appendChild(elem);
        return function() {
          var _j, _len1, _ref1;
          _ref1 = (function() {
            var _k, _len1, _ref1, _results;
            _ref1 = oldbody.childNodes;
            _results = [];
            for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
              node = _ref1[_k];
              _results.push(node);
            }
            return _results;
          })();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            body.appendChild(node);
          }
          removeElem(oldbody);
          if (nextSibling) {
            return elem.insertBefore(nextSibling);
          } else {
            return parent.appendChild(elem);
          }
        };
      };
    }
    logurl = "/logger";
    logfrequency = 1;
    log = (function() {
      var logContent, logsession, schedule, scheduled;
      logsession = String(Math.random()).slice(2);
      scheduled = false;
      logContent = "" + (Date.now()) + " " + logsession + "\n";
      schedule = function() {
        if (scheduled) {
          return;
        }
        scheduled = true;
        return sleep(logfrequency, function() {
          var data;
          scheduled = false;
          data = logContent;
          logContent = "" + (Date.now()) + " " + logsession + "\n";
          return post(logurl, data, function(err, result) {
            if (err) {
              logContent = data + logContent;
              return schedule();
            }
          });
        });
      };
      elemAddEventListener(window, "beforeunload", function() {
        var e;
        log("beforeunload");
        try {
          post(logurl, logContent);
        } catch (_error) {
          e = _error;
          void 0;
        }
        return void 0;
      });
      elemAddEventListener(window, "error", function(err) {
        return log("window.onerror", err != null ? err.message : void 0);
      });
      return function() {
        var arg, args, e;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log.apply(console, args);
          }
        }
        args = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            try {
              _results.push(JSON.stringify(arg));
            } catch (_error) {
              e = _error;
              _results.push("[" + (typeof arg) + "]");
            }
          }
          return _results;
        })();
        logContent += "" + (Date.now()) + " " + (args.join(" ")) + "\n";
        return schedule();
      };
    })();
    log("logging enabled", window.performance, window.screen, (_ref = window.navigator) != null ? _ref.userAgent : void 0);
    touchHandler = void 0;
    setTouch = void 0;
    (function() {
      var condCall, documentTouch, moveTouch, startTouch, stopTouch, tapDist2, tapLength, touch, updateTouch;
      touch = void 0;
      setTouch = function(t) {
        return touch = t;
      };
      tapLength = 500;
      tapDist2 = 10 * 10;
      updateTouch = function(touch, e) {
        var x, y;
        x = e.clientX;
        y = e.clientY;
        touch.event = e;
        touch.ddx = x - touch.x || 0;
        touch.ddy = y - touch.y || 0;
        touch.dx = x - touch.x0;
        touch.dy = y - touch.y0;
        touch.maxDist2 = touch.dx * touch.dx + touch.dy * touch.dy;
        touch.time = Date.now() - touch.startTime;
        touch.x = x;
        return touch.y = y;
      };
      startTouch = function(e, handler, touchObj) {
        var holdHandler;
        touch = touchObj;
        touch.handler = handler;
        touch.x0 = e.clientX;
        touch.y0 = e.clientY;
        touch.x = e.clientX;
        touch.y = e.clientY;
        log("startTouch", touch.x, touch.y);
        touch.startTime = Date.now();
        updateTouch(touch, e);
        touch.ctx = handler.start(touch);
        holdHandler = function() {
          if (touch && !touch.holding && touch.maxDist2 < tapDist2) {
            touch.holding = true;
            return touch.handler.hold(touch);
          }
        };
        return setTimeout(holdHandler, tapLength);
      };
      moveTouch = function(e) {
        updateTouch(touch, e);
        log("moveTouch", touch.x, touch.y);
        return touch.ctx = touch.handler.move(touch || touch.ctx);
      };
      stopTouch = function(e) {
        log("stopTouch");
        touch.handler.end(touch);
        if (touch.maxDist2 < tapDist2 && touch.time < tapLength) {
          touch.handler.click(touch);
        }
        return touch = void 0;
      };
      condCall = function(fn) {
        return function(e) {
          var _ref1;
          if (!touch) {
            return void 0;
          }
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
          return fn(((_ref1 = e.touches) != null ? _ref1[0] : void 0) || e);
        };
      };
      documentTouch = runOnce(function() {
        elemAddEventListener(document, "mousemove", condCall(moveTouch));
        elemAddEventListener(document, "touchmove", condCall(moveTouch));
        elemAddEventListener(document, "mouseup", function(e) {
          log("mouseup");
          return (condCall(stopTouch))(e);
        });
        return elemAddEventListener(document, "touchend", condCall(stopTouch));
      });
      return touchHandler = function(handler) {
        elemAddEventListener(handler.elem, "mousedown", function(e) {
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
          return startTouch(e, handler, {
            isMouse: true
          });
        });
        elemAddEventListener(handler.elem, "touchstart", function(e) {
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
          return startTouch(e.touches[0], handler, {});
        });
        documentTouch();
        handler.start || (handler.start = nop);
        handler.move || (handler.move = nop);
        handler.end || (handler.end = nop);
        handler.drag || (handler.drag = nop);
        handler.click || (handler.click = nop);
        handler.hold || (handler.hold = nop);
        return handler;
      };
    })();
    (function() {
      var callbackNo, default360Config, eventHandler, untouched, zoomHeight, zoomSize, zoomWidth;
      callbackNo = 0;
      zoomWidth = void 0;
      zoomHeight = void 0;
      zoomSize = 200;
      eventHandler = void 0;
      untouched = true;
      default360Config = {
        autorotate: true,
        imageURLs: void 0
      };
      onComplete(function() {
        var zoomLens;
        body = document.getElementsByTagName("body")[0];
        zoomLens = document.createElement("div");
        setStyle(zoomLens, {
          position: "absolute",
          overflow: "hidden",
          width: zoomSize + "px",
          height: zoomSize + "px",
          border: "0px solid black",
          cursor: "default",
          backgroundColor: "rgba(100,100,100,0.8)",
          borderRadius: (zoomSize / 2) + "px",
          boxShadow: "0px 0px 40px 0px rgba(255,255,255,.7) inset, 4px 4px 9px 0px rgba(0,0,0,0.5)",
          display: "none"
        });
        zoomLens.id = "zoomLens360";
        return body.appendChild(zoomLens);
      });
      return window.onetwo360 = function(cfg) {
        var autorotate, cache360Images, container, currentAngle, doZoom, elem, endZoom, fullScreenOriginalState, get360Config, height, img, init360Controls, init360Elem, logoElem, overlay, toggleFullScreen, updateImage, width, zoomSrc;
        log("onetwo360", cfg);
        currentAngle = 0;
        width = void 0;
        height = void 0;
        doZoom = void 0;
        endZoom = void 0;
        logoElem = void 0;
        elem = document.getElementById(cfg.elem_id);
        container = document.createElement("div");
        setStyle(container, {
          display: "inline-block",
          position: "relative"
        });
        img = new Image();
        eventHandler = touchHandler({
          elem: elem
        });
        elem.appendChild(container);
        container.appendChild(img);
        img.src = "spinner.gif";
        setStyle(img, {
          position: "absolute",
          top: "49%",
          left: "49%"
        });
        overlay = function() {
          var buttonStyle, fullScreenElem, h, w, zoomElem;
          setStyle(img, {
            top: "0px",
            left: "0px"
          });
          w = cfg.request_width;
          h = cfg.request_height;
          logoElem = document.createElement("i");
          logoElem.className = "icon-OneTwo360Logo";
          container.appendChild(logoElem);
          setStyle(logoElem, {
            position: "absolute",
            top: h * .35 + "px",
            left: w * .25 + "px",
            opacity: "0.7",
            textShadow: "0px 0px 5px white",
            fontSize: h * .2 + "px",
            color: "#333",
            transition: "opacity 1s"
          });
          logoElem.onmouseover = function() {
            logoElem.style.opacity = "0";
            return sleep(1, function() {
              return logoElem.style.display = "none";
            });
          };
          buttonStyle = function(el) {
            setStyle(el, {
              position: "absolute",
              color: "#333",
              opacity: "0.7",
              textShadow: "0px 0px 5px white",
              backgroundColor: "rgba(255,255,255,0)",
              fontSize: h * .08 + "px",
              padding: h * .02 + "px"
            });
            return el;
          };
          fullScreenElem = document.createElement("i");
          fullScreenElem.className = "fa fa-fullscreen";
          fullScreenElem.ontouchstart = fullScreenElem.onmousedown = toggleFullScreen;
          container.appendChild(fullScreenElem);
          setStyle(buttonStyle(fullScreenElem), {
            top: h * .85 + "px",
            left: w - h * .15 + "px"
          });
          zoomElem = document.createElement("i");
          zoomElem.className = "fa fa-search";
          container.appendChild(zoomElem);
          return setStyle(buttonStyle(zoomElem), {
            top: h * .85 + "px",
            left: 0 + "px"
          });
        };
        nextTick(function() {
          return get360Config();
        });
        get360Config = function() {
          var callbackName, scriptTag;
          callbackName = "callback" + ++callbackNo;
          if (devMode) {
            callbackName = "callback";
          }
          window.xxx = scriptTag = void 0;
          window[callbackName] = function(data) {
            var e, file, serverConfig;
            log("data from embed.onetwo360.com:", data);
            serverConfig = {
              imageURLs: (function() {
                var _i, _len, _ref1, _results;
                _ref1 = data.files;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  file = _ref1[_i];
                  _results.push(data.baseUrl + file.normal);
                }
                return _results;
              })(),
              zoomURLs: (function() {
                var _i, _len, _ref1, _results;
                _ref1 = data.files;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  file = _ref1[_i];
                  _results.push(data.baseUrl + file.zoom);
                }
                return _results;
              })(),
              request_width: data.width,
              request_height: data.width
            };
            zoomWidth = data.zoomWidth;
            zoomHeight = data.zoomHeight;
            cfg = extend({}, default360Config, serverConfig, cfg);
            init360Elem();
            removeElem(scriptTag);
            setStyle(elem, {
              display: "inline-block",
              width: data.width + "px",
              height: data.height + "px",
              overflow: "hidden"
            });
            setStyle(container, {
              width: data.width + "px",
              height: data.height + "px"
            });
            try {
              return delete window[callbackName];
            } catch (_error) {
              e = _error;
              return void 0;
            }
          };
          window.xxx = scriptTag = document.createElement("script");
          scriptTag.src = "http://embed.onetwo360.com/" + cfg.product_id + "?callback=" + callbackName;
          if (devMode) {
            scriptTag.src = "/testdata/config.js";
          }
          return document.getElementsByTagName("head")[0].appendChild(scriptTag);
        };
        init360Elem = function() {
          return cache360Images(function() {
            setStyle(img, {
              width: cfg.request_width + "px",
              height: cfg.request_height + "px",
              cursor: "url(res/cursor_rotate.cur),move"
            });
            width = cfg.request_width;
            height = cfg.request_height;
            overlay();
            init360Controls();
            if (cfg.autorotate) {
              return autorotate(nop);
            }
          });
        };
        cache360Images = function(done) {
          return cacheImgs(cfg.imageURLs, done);
        };
        autorotate = function(done) {
          var showNext;
          untouched = true;
          currentAngle = 0;
          showNext = function() {
            if (untouched && currentAngle < Math.PI * 2) {
              currentAngle = currentAngle + 0.2;
              updateImage();
              return setTimeout(showNext, 60);
            } else {
              return done();
            }
          };
          return showNext();
        };
        updateImage = function() {
          return requestAnimationFrame(function() {
            var imgsrc;
            img.src = cfg.imageURLs[floatPart(currentAngle / Math.PI / 2) * cfg.imageURLs.length | 0];
            imgsrc = img.src;
            if (fullScreenOriginalState) {
              return sleep(.5, function() {
                var largeImage;
                largeImage = new Image;
                largeImage.onload = function() {
                  if (imgsrc === img.src) {
                    img.src = largeImage.src;
                  }
                  return cache360Images(nop);
                };
                return largeImage.src = cfg.zoomURLs[floatPart(currentAngle / Math.PI / 2) * cfg.imageURLs.length | 0];
              });
            }
          });
        };
        init360Controls = function() {
          eventHandler.move = function(t) {
            if (t.holding || t.zoom360) {
              return nextTick(function() {
                return doZoom(t);
              });
            } else {
              currentAngle -= 2 * Math.PI * t.ddx / width;
              return updateImage();
            }
          };
          eventHandler.hold = function(t) {
            return nextTick(function() {
              return doZoom(t);
            });
          };
          eventHandler.start = function(t) {
            setStyle(logoElem, {
              opacity: "0"
            });
            return untouched = false;
          };
          eventHandler.end = function(t) {
            return nextTick(function() {
              return endZoom(t);
            });
          };
          return eventHandler.click = function(t) {
            if (t.isMouse) {
              log("click");
              t.zoom360 = true;
              return nextTick(function() {
                return setTouch(t);
              });
            }
          };
        };
        zoomSrc = void 0;
        doZoom = function(t) {
          var bgLeft, bgTop, imgHeight, imgPos, imgWidth, largeSrc, loadZoom, maxX, maxY, minX, minY, normalSrc, touchX, touchY, x, y, zoomLeftPos, zoomLens, zoomTopPos;
          zoomLens = document.getElementById("zoomLens360");
          if (zoomSrc === void 0) {
            normalSrc = cfg.imageURLs[floatPart(currentAngle / Math.PI / 2) * cfg.zoomURLs.length | 0];
            largeSrc = cfg.zoomURLs[floatPart(currentAngle / Math.PI / 2) * cfg.zoomURLs.length | 0];
            zoomSrc = normalSrc;
            loadZoom = new Image;
            loadZoom.onload = function() {
              if (zoomSrc === normalSrc) {
                zoomSrc = largeSrc;
                return doZoom(t);
              }
            };
            loadZoom.src = largeSrc;
          }
          imgPos = img.getBoundingClientRect();
          minY = imgPos.top;
          maxY = imgPos.bottom;
          minX = imgPos.left;
          maxX = imgPos.right;
          imgWidth = maxX - minX;
          imgHeight = maxY - minY;
          touchX = .5;
          touchY = t.isMouse ? .5 : 1.1;
          y = Math.min(maxY, Math.max(minY, t.y));
          x = Math.min(maxX, Math.max(minX, t.x));
          zoomLeftPos = x + body.scrollLeft - zoomSize * touchX;
          zoomTopPos = y + body.scrollTop - zoomSize * touchY;
          bgLeft = zoomSize * touchX - ((x - imgPos.left) * zoomWidth / imgWidth);
          bgTop = zoomSize * touchY - ((y - imgPos.top) * zoomHeight / imgHeight);
          return setStyle(zoomLens, {
            display: "block",
            position: "absolute",
            left: zoomLeftPos + "px",
            top: zoomTopPos + "px",
            backgroundImage: "url(" + zoomSrc + ")",
            backgroundSize: "" + zoomWidth + "px " + zoomHeight + "px",
            backgroundPosition: "" + bgLeft + "px " + bgTop + "px",
            backgroundRepeat: "no-repeat"
          });
        };
        endZoom = function(t) {
          zoomSrc = void 0;
          img.style.cursor = "url(res/cursor_rotate.cur),move";
          (document.getElementById("zoomLens360")).style.display = "none";
          return cache360Images(nop);
        };
        fullScreenOriginalState = void 0;
        return toggleFullScreen = function(e) {
          var heightPad, scaleFactor, scaleStr, style, widthPad;
          scaleFactor = Math.min(window.innerWidth / width, window.innerHeight / height);
          e.preventDefault();
          e.stopPropagation();
          if (fullScreenOriginalState) {
            setStyle(elem, fullScreenOriginalState);
            fullScreenOriginalState = void 0;
          } else {
            style = elem.style;
            fullScreenOriginalState = {
              position: style.position,
              top: style.top,
              left: style.top,
              zoom: style.zoom,
              transform: style.transform,
              webkitTransform: style.webkitTransform,
              transformOrigin: style.transformOrigin,
              webkitTransformOrigin: style.webkitTransformOrigin,
              margin: style.margin,
              padding: style.padding
            };
            scaleStr = "scale(" + scaleFactor + ", " + scaleFactor + ")";
            widthPad = ((window.innerWidth / (scaleFactor * width)) - 1) / 2 * width;
            heightPad = ((window.innerHeight / (scaleFactor * height)) - 1) / 2 * height;
            setStyle(elem, {
              margin: "0",
              padding: "" + heightPad + "px " + widthPad + "px " + heightPad + "px " + widthPad + "px",
              position: "fixed",
              top: "0px",
              left: "0px"
            });
            if (style.transform === "" || style.webkitTransform === "") {
              setStyle(elem, {
                transform: scaleStr,
                webkitTransform: scaleStr,
                transformOrigin: "0 0",
                webkitTransformOrigin: "0 0"
              });
            } else {
              elem.style.zoom = scaleFactor;
            }
          }
          updateImage();
          return false;
        };
      };
    })();
  }

  if (isNodeJs) {
    exports.about = {
      title: "360º Viewer",
      description: "Widget for showing OneTwo360 images/animations",
      owner: "onetwo360",
      name: "360",
      html5: {
        userScaleable: true,
        css: ["http://onetwo360.com/themes/onetwo360/site/360logofont.css", "//netdna.bootstrapcdn.com/font-awesome/4.0.1/css/font-awesome.css"]
      },
      webjs: true,
      "package": {
        dependencies: {
          solapp: "*"
        }
      }
    };
  }

  if (isDevServer && !isNodeJs) {
    (function() {
      var sa;
      sa = require("solapp");
      exports.main = function(solapp) {
        solapp.setContent([
          "div", [
            "center", {
              style: {
                width: 1000,
                height: 447
              }
            }, [
              "span#threesixtyproduct", {
                style: {
                  background: "#ccc"
                }
              }
            ]
          ]
        ]);
        return onetwo360({
          elem_id: "threesixtyproduct",
          product_id: "lukub2ip",
          request_width: 1000,
          request_height: 447
        });
      };
      return setTimeout((function() {
        var blah;
        blah = document.createElement("div");
        document.body.appendChild(blah);
        blah.innerHTML = Date.now();
        setInterval((function() {
          return blah.innerHTML = "" + window.innerHeight + " " + window.innerWidth + " " + body.scrollTop + " " + body.scrollLeft;
        }), 1000);
        return sleep(3, function() {
          return njn();
        });
      }), 0);
    })();
  }

  if (isNodeJs) {
    (function() {
      return exports.devServerMain = function(app) {
        return app.use("/logger", function(req, res, next) {
          var data;
          data = "";
          req.on("data", function(d) {
            return data += d;
          });
          return req.on("end", function() {
            res.header('Access-Control-Allow-Origin', "*");
            res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
            res.header('Access-Control-Allow-Headers', 'Content-Type');
            console.log(data);
            res.json({
              ok: true
            });
            return res.end();
          });
        });
      };
    })();
  }

}).call(this);
