// Generated by CoffeeScript 1.6.3
(function() {
  var View, app, currentTestId, defaultModel, expect, express, extend, port, testcount;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof global === "undefined" ? window : global;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof window === "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  if (runTest) {
    testcount = 2;
    currentTestId = 0;
    console.log("1.." + testcount);
    expect = function(expected, result, description) {
      if (expected === result) {
        return console.log("ok", ++currentTestId, description || "");
      } else {
        return console.log("not ok", ++currentTestId, description || "", "expected:" + (JSON.stringify(expected)), "got:" + (JSON.stringify(result)));
      }
    };
    expect(1, 1);
    expect(2, 3);
  }

  if (!isNodeJs) {
    extend = function(target, source) {
      var key, val, _results;
      _results = [];
      for (key in source) {
        val = source[key];
        _results.push(target[key] = val);
      }
      return _results;
    };
    defaultModel = function() {
      return {
        frames: {
          current: 0,
          normal: {
            width: void 0,
            height: void 0,
            urls: []
          },
          zoom: {
            width: void 0,
            height: void 0,
            urls: []
          }
        },
        fullscreen: false,
        zoom: {
          lensSize: 200,
          enabled: false,
          x: void 0,
          y: void 0
        },
        domElem: {
          width: void 0,
          height: void 0,
          domId: void 0
        }
      };
    };
    View = function(model, domId) {
      var buttonStyle, domElem, elemNames, i, key, _, _i, _ref, _ref1;
      this.model = model;
      domElem = document.getElementById(domId);
      this.defaultWidth = domElem.offsetWidth;
      this.defaultHeigh = domElem.offsetHeight;
      extend(domElem.style, {
        display: "inline-block",
        width: this.defaultWidth + "px",
        height: this.defaultHeight + "px"
      });
      this.style = {
        root: {
          cursor: "url(res/cursor_rotate.cur),move"
        },
        zoomLens: {
          display: "block",
          position: "absolute",
          overflow: "hidden",
          width: this.model.zoom.lensSize,
          height: this.model.zoom.lensSize,
          border: "0px solid black",
          cursor: "default",
          backgroundColor: "rgba(100,100,100,0.8)",
          borderRadius: this.model.zoom.lensSize / 2,
          boxShadow: "0px 0px 40px 0px rgba(255,255,255,.7) inset, 4px 4px 9px 0px rgba(0,0,0,0.5)",
          backgroundRepeat: "no-repeat"
        },
        logo: {
          position: "absolute",
          opacity: "0.7",
          textShadow: "0px 0px 5px white",
          color: "#333",
          transition: "opacity 1s"
        },
        btnFull: {
          left: "90%"
        },
        btnZoom: {
          left: "5%"
        },
        spinner: {
          position: "absolute",
          top: "49%",
          left: "49%"
        }
      };
      buttonStyle = {
        position: "absolute",
        color: "#333",
        opacity: "0.7",
        textShadow: "0px 0px 5px white",
        backgroundColor: "rgba(255,255,255,0)",
        top: "80%",
        fontSize: this.defaultHeight * .08,
        padding: this.defaultHeight * .02
      };
      extend(this.style.btnFull, buttonStyle);
      extend(this.style.btnZoom, buttonStyle);
      this.elems = {};
      this.elems.root = document.createElement("div");
      this.elems.root.innerHTML = '<div class="onetwo360-zoom-lens"></div>' + '<i class="icon-OneTwo360Logo"></div>' + '<i class="fa fa-fullscreen onetwo360-fullscreen-button"></div>' + '<i class="fa fa-search onetwo360-fullscreen-button"></div>' + '<img src="spinner.gif">';
      domElem.addChild(this.elems.root);
      elemNames = Object.keys(this.style);
      for (i = _i = 1, _ref = elemNames.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.elems[elemNames[i]] = this.elems.root.getChild(i - 1);
      }
      this.width = void 0;
      this.height = void 0;
      this.logoFade = void 0;
      this.elemStyle = {};
      this.styleCache = {};
      _ref1 = this.elems;
      for (key in _ref1) {
        _ = _ref1[key];
        this.elemStyle[key] = this.elems[key].style;
        this.styleCache[key] = {};
      }
      return this.update();
    };
    View.prototype.update = function() {
      this._fullscreen();
      this._root();
      this._logo();
      this._zoomLens();
      return this._applyStyle();
    };
    View.prototype._fullscreen = function() {
      if (this.model.fullscreen) {
        return extend(this.style.root, {
          position: "absolute",
          top: 0,
          left: 0,
          width: (this.width = window.innerWidth),
          height: (this.height = window.innerHeight)
        });
      } else {
        return extend(this.style.root, {
          position: "relative",
          top: 0,
          left: 0,
          width: (this.width = this.defaultWidth),
          height: (this.height = this.defaultHeight)
        });
      }
    };
    View.prototype._root = function() {
      return extend(this.style.root, {
        backgroundImage: "url(" + this.model.frames.normal.urls[this.model.frames.current] + ")",
        backgroundSize: "" + this.width + "px " + this.height + "px"
      });
    };
    View.prototype._logo = function() {
      return {
        top: h * .35 + "px",
        left: w * .25 + "px",
        fontSize: h * .2 + "px"
      };
    };
    View.prototype._zoomLens = function() {
      var current, imgs;
      if (this.model.zoom.enabled) {
        current = this.model.frames.current;
        imgs = this.model.frames.zoom;
        return extend(this.style.zoomLens, {
          display: "block",
          left: 123,
          top: 123,
          backgroundImage: "url(" + imgs.urls[current] + ")",
          backgroundSize: "" + imgs.width + "px " + imgs.height + "px",
          backgroundPosition: "" + 123 + "px " + 123 + "px"
        });
      } else {
        return extend(this.style.zoomLens, {
          display: "none"
        });
      }
    };
    View.prototype._applyStyle = function() {
      var css, elemId, key, val, _ref, _results;
      _ref = this.style;
      _results = [];
      for (elemId in _ref) {
        css = _ref[elemId];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (key in css) {
            val = css[key];
            if (this.styleCache[key] !== val) {
              if (typeof val === "number") {
                this.elemStyle[elemId][key] = "" + val + "px";
              } else {
                this.elemStyle[elemId][key] = val;
              }
              _results1.push(this.styleCache[key] = val);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };
    window.onetwo360 = function(cfg) {
      return void 0;
    };
  }

  if (isNodeJs) {
    express = require("express");
    app = express();
    app.use(express["static"](__dirname));
    port = 4444;
    app.listen(port);
    console.log("devserver running on port " + port);
  }

}).call(this);
